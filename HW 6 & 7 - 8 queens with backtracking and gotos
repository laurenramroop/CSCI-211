//This program is designed to demonstrate the 8 queens problem, one solution
//using GOTO statements, while another having a dedicated backtracking function.

#include <iostream>
#include <cstdlib>
#include <cmath>
using namespace std;

void HW6(){
  int q[8], c = 0;
  q[0] = 0; //initialize first row column

  NC: 
  c++;
  if (c == 8) goto print;
  q[c] = -1;

  NR: 
  q[c]++;
  if (q[c] == 8) goto backtrack;

  // row, up diagonal, and down diagonal test
  for (int i = 0; i < c; i++){
    if (q[c] ==  q[i] || (c - i) == abs(q[c] - q[i])) 
      goto NR;
    }
  goto NC;

  backtrack: 
  c--;
  if (c ==-1) return;
  goto NR;
  
  print:
  for (int c = 0; c < 8; c++){
    for (int r = 0; r < 8; r++){
      if (q[c] == r){
        cout<<"1"<<" ";
      }else{
        cout<<"0"<<" ";
      }
    }
    cout<<endl;
    if (c == 7) cout<<endl;
  }
  goto backtrack;

  return;
}

bool check(int q[], int c) {
  for (int i = 0; i < c; i++) {
    if (q[i] == q[c] || c - i == abs(q[c] - q[i]))
      return false;
  }
  return true;
}

void backtrack(int &c) {
  c--;
  if (c == -1) return;
}

void print(int q[]){
  for (int c = 0; c < 8; c++){
    for (int r = 0; r < 8; r++){
      if (q[r] == c){
        cout<<"1"<<" ";
      }else{
        cout<<"0"<<" ";
      }
      
    }
    cout<<endl;
    if (c == 7) cout<<endl;
  }
}


void HW7(){
  int q[8], c = 0;
  q[0] = 0;
  
  while (c >= 0){ 
    //columns
    c++;
    if (c == 8){
      print(q);
      backtrack(c);
    }else{
      q[c] = -1;
    }

    //rows
    while (c >= 0){
      q[c]++;
      if (q[c]==8){
        backtrack(c);
      }else{
        if (check(q,c)) break;
      }  
    }
  }
  
  
  return;
}

int main(){
  cout<<"1D 8 queens with backtracking"<<endl;
  HW6();
  cout<<"1D 8 queens with no gotos"<<endl;
  HW7();
  return 0;
}
