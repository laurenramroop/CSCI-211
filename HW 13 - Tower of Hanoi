//This program is designed to solve the hanoi tower game, which is to
//determine the minimum number of turns needed to move 3 rings between 3 towers
//without placing a larger ring on top of a smaller ring.
//It uses vectors because of its dynamic size

#include <iostream>
#include <cstdlib>
#include <vector>
using namespace std;

int main() {
  vector<int>t[3]; //three towers a, b, c, represented as array of 3 vectors
  int n;
  cout<<"Please enter any number of rings: ";
  cin>>n;
  cout<<endl;

  //initialize towers
  for (int i = n + 1; i >= 1; i--) t[0].push_back(i);
    t[1].push_back(n+1);
    t[2].push_back(n+1);

  //odd
  if (n % 2 == 1){
    int candidate = 1, to = 1, from = 0, move = 0; 
    
    while (t[1].size() < n + 1){
      cout<<"Move number "<<++move<<" : Transfer ring "<<candidate<<" from tower "<<char(from + 65)<<" to tower "<<char(to + 65)<<endl;

      t[to].push_back(t[from].back()); //add top number on "from" onto "to"
      t[from].pop_back(); //remove top number on "from "

      //get next "from tower"
      if (t[(to + 1) % 3].back() < t[(to + 2) % 3].back()){
        from = (to + 1) % 3;
      }else {
        from = (to + 2) % 3; 
      }

      //get next "to tower" (has to be bigger than from)
      if (t[from].back() > t[(from + 1) % 3].back()){
        to = (from + 2) % 3; 
      }else{
        to = (from + 1) % 3;
      }
      
      candidate = t[from].back(); //it's on the top of the current "from tower"
    }
  }

  //even
  if (n % 2 == 0){
    //initialize "to" as 2 bc going backwards 
    int candidate = 1, to = 2, from = 0, move = 0; 

     while (t[1].size() < n + 1){
      cout<<"Move number "<<++move<<" : Transfer ring "<<candidate<<" from tower "<<char(from + 65)<<" to tower "<<char(to + 65)<<endl;

      t[to].push_back(t[from].back()); 
      t[from].pop_back(); 

      //get next "from tower"
      if (t[(to + 1) % 3].back() < t[(to + 2) % 3].back()){ 
        from = (to + 1) % 3; //from = 0
      }else {
        from = (to + 2) % 3; 
      }

      //get next "to tower" (has to be bigger than from)
      if (t[(from) % 3].back() < t[(from + 2) % 3].back()){
        to = (from + 2) % 3; //
      }else{
        to = (from + 1) % 3;
      }
      
      candidate = t[from].back(); //it's on the top of the current "from tower"
    }

  }


  return 0;
}
